package com.itssvkv.darkpix.ui.searchimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.itssvkv.darkpix.data.local.repository.ApiCallsRepositoryimport com.itssvkv.darkpix.models.adaptersdata.CategoryDataimport com.itssvkv.darkpix.models.adaptersdata.TrendingDataimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass SearchViewModel @Inject constructor(    private val repo: ApiCallsRepository) : ViewModel() {    private var _trendingLiveData: MutableLiveData<List<TrendingData>> = MutableLiveData()    val trendingLiveData: LiveData<List<TrendingData>>        get() = _trendingLiveData    private var _categoryLiveData = MutableLiveData<List<CategoryData>>()    val categoryLiveData: LiveData<List<CategoryData>>        get() = _categoryLiveData    fun getTrendingData() {        viewModelScope.launch {            _trendingLiveData.postValue(repo.getTrendingData())        }    }    fun getCategoryData() {        viewModelScope.launch {            _categoryLiveData.postValue(repo.getCategoryData())        }    }    suspend fun searchForItem(query: String) =        repo.searchForItem(query).flow}