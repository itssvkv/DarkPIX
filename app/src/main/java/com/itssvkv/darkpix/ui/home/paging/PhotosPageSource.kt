package com.itssvkv.darkpix.ui.home.pagingimport android.util.Logimport androidx.paging.PagingSourceimport androidx.paging.PagingStateimport com.itssvkv.darkpix.data.network.ApiCallsimport com.itssvkv.darkpix.models.responses.PixelsPhotosResponseimport com.itssvkv.darkpix.utils.Common.SAKKAimport javax.inject.Injectclass PhotosPageSource @Inject constructor(private val apiCalls: ApiCalls) :    PagingSource<Int, PixelsPhotosResponse.Photo>() {    override fun getRefreshKey(state: PagingState<Int, PixelsPhotosResponse.Photo>): Int? {        return null    }    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, PixelsPhotosResponse.Photo> {        return try {            val pageIndex = params.key ?: 1            Log.d(SAKKA, "load: ")            val response = apiCalls.getAllPhotos(pageIndex)            LoadResult.Page(                data = response.photos,                prevKey = if (pageIndex == 1) null else pageIndex - 1,                nextKey = if (response.photos.isEmpty()) null else pageIndex + 1            )        } catch (e: Exception) {            LoadResult.Error(e)        }    }}