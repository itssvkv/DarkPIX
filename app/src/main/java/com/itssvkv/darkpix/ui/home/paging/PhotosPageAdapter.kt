package com.itssvkv.darkpix.ui.home.pagingimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.paging.PagingDataAdapterimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.bumptech.glide.load.engine.DiskCacheStrategyimport com.itssvkv.darkpix.databinding.RecPhotosBindingimport com.itssvkv.darkpix.models.responses.PixelsPhotosResponseimport javax.inject.Injectclass PhotosPageAdapter @Inject constructor() :    PagingDataAdapter<PixelsPhotosResponse.Photo, PhotosPageAdapter.ViewHolder>(diffCallback) {    inner class ViewHolder(private val binding: RecPhotosBinding) :        RecyclerView.ViewHolder(binding.root) {        fun bind(item: PixelsPhotosResponse.Photo?) {            Glide.with(binding.homeRecPhoto.context).load(item?.src?.portrait).diskCacheStrategy(                DiskCacheStrategy.RESOURCE            )                .into(binding.homeRecPhoto)            binding.homeRecPhoto.setOnClickListener {                onItemClicked?.invoke(item!!)            }        }    }    var onItemClicked: ((PixelsPhotosResponse.Photo) -> Unit)? = null    override fun onBindViewHolder(holder: ViewHolder, position: Int) {        val item = getItem(position)        item.let {            holder.bind(it)        }    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {        val binding = RecPhotosBinding.inflate(LayoutInflater.from(parent.context), parent, false)        return ViewHolder(binding)    }    companion object {        val diffCallback = object : DiffUtil.ItemCallback<PixelsPhotosResponse.Photo>() {            override fun areItemsTheSame(                oldItem: PixelsPhotosResponse.Photo,                newItem: PixelsPhotosResponse.Photo            ): Boolean {                return oldItem.id == newItem.id            }            override fun areContentsTheSame(                oldItem: PixelsPhotosResponse.Photo,                newItem: PixelsPhotosResponse.Photo            ): Boolean {                return oldItem == newItem            }        }    }}