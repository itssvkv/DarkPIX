package com.itssvkv.darkpix.ui.authimport android.content.Contextimport android.util.Logimport androidx.lifecycle.ViewModelimport com.itssvkv.darkpix.data.local.repository.ApiCallsRepositoryimport com.itssvkv.darkpix.data.local.repository.SharedPrefRepositoryimport com.itssvkv.darkpix.utils.Commonimport com.itssvkv.darkpix.utils.safeapi.CallResultimport com.itssvkv.darkpix.utils.safeapi.CallStateimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.asStateFlowimport javax.inject.Inject@HiltViewModelclass AuthViewModel @Inject constructor(    private val repo: ApiCallsRepository,    private val sharedPrefRepo: SharedPrefRepository) : ViewModel() {    private val _accessTokenResponse = MutableStateFlow<CallState>(CallState.EmptyState)    val accessTokenResponse = _accessTokenResponse.asStateFlow()    suspend fun getAccessToken(        clientId: String,        clientSecret: String,        redirectUri: String,        code: String,        grantType: String,        context: Context    ) {        _accessTokenResponse.value = CallState.LoadingState        when (val response =            repo.getAccessToken(clientId, clientSecret, redirectUri, code, grantType)) {            is CallResult.CallSuccess -> {                Log.d(Common.SAKKA, "getAccessToken: success")                _accessTokenResponse.value = CallState.SuccessState(response.data)                sharedPrefRepo.saveToPref(context, Common.ACCESS_TOKEN, response.data.access_token)            }            is CallResult.CallFailure -> _accessTokenResponse.value =                CallState.FailureState(response.msg, response.code)        }    }}