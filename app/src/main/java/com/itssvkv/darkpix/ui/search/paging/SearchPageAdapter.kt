package com.itssvkv.darkpix.ui.search.pagingimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.paging.PagingDataAdapterimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.itssvkv.darkpix.databinding.RecPhotosBindingimport com.itssvkv.darkpix.models.responses.PixelsPhotosResponseimport javax.inject.Injectclass SearchPageAdapter @Inject constructor() :    PagingDataAdapter<PixelsPhotosResponse.Photo, SearchPageAdapter.SearchViewHolder>(Comparator) {    var onSearchPhotosClicked: ((PixelsPhotosResponse.Photo) -> Unit)? = null    inner class SearchViewHolder(private val binding: RecPhotosBinding) :        RecyclerView.ViewHolder(binding.root) {        fun bind(item: PixelsPhotosResponse.Photo?) {            Glide.with(binding.homeRecPhoto.context).load(item?.src?.portrait)                .into(binding.homeRecPhoto)            binding.root.setOnClickListener {                onSearchPhotosClicked?.invoke(item!!)            }        }    }    private object Comparator : DiffUtil.ItemCallback<PixelsPhotosResponse.Photo>() {        override fun areItemsTheSame(            oldItem: PixelsPhotosResponse.Photo,            newItem: PixelsPhotosResponse.Photo        ) = oldItem.id == newItem.id        override fun areContentsTheSame(            oldItem: PixelsPhotosResponse.Photo,            newItem: PixelsPhotosResponse.Photo        ) = oldItem == newItem    }    override fun onBindViewHolder(holder: SearchViewHolder, position: Int) {        val item = getItem(position)        item.let {            holder.bind(it)        }    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SearchViewHolder {        val binding = RecPhotosBinding.inflate(LayoutInflater.from(parent.context), parent, false)        return SearchViewHolder(binding)    }}