package com.itssvkv.darkpix.ui.splashimport android.content.Contextimport android.os.Handlerimport android.os.Looperimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.itssvkv.darkpix.data.local.repository.SharedPrefRepositoryimport com.itssvkv.darkpix.utils.Commonimport com.itssvkv.darkpix.utils.Common.ACCESS_TOKENimport com.itssvkv.darkpix.utils.Common.SAKKAimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass SplashViewModel @Inject constructor(    private val repo: SharedPrefRepository) : ViewModel() {    private val _isFirstTimeLiveData = MutableLiveData<Boolean>()    val isFirstTimeLiveData: LiveData<Boolean>        get() = _isFirstTimeLiveData    private val _isAuthDoneLiveData = MutableLiveData<Boolean>()    val isAuthDoneLiveData: LiveData<Boolean>        get() = _isAuthDoneLiveData    fun init(context: Context) {        Handler(Looper.getMainLooper()).postDelayed({            viewModelScope.launch {                val isFirstTime =                    repo.getFromPref(context, Common.IS_FIRST_TIME, true) as Boolean                val isAuthDone =                    repo.getFromPref(context, ACCESS_TOKEN, "") as String                if (isFirstTime) {                    repo.saveToPref(context, Common.IS_FIRST_TIME, false)                    _isFirstTimeLiveData.postValue(true)                    Log.d(SAKKA, "init: $_isFirstTimeLiveData")                } else {                    _isFirstTimeLiveData.postValue(false)                    if (isAuthDone.isEmpty()) {                        _isAuthDoneLiveData.postValue(false)                    } else {                        _isAuthDoneLiveData.postValue(true)                    }                }            }        }, 1000L)    }}