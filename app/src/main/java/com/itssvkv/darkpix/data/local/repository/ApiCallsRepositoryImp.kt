package com.itssvkv.darkpix.data.local.repositoryimport androidx.paging.Pagerimport androidx.paging.PagingConfigimport com.itssvkv.darkpix.Rimport com.itssvkv.darkpix.data.network.ApiCallsimport com.itssvkv.darkpix.data.network.ApiServersimport com.itssvkv.darkpix.models.adaptersdata.CategoryDataimport com.itssvkv.darkpix.models.adaptersdata.TrendingDataimport com.itssvkv.darkpix.models.responses.PixelsPhotosResponseimport com.itssvkv.darkpix.ui.home.paging.PhotosPageSourceimport com.itssvkv.darkpix.ui.search.paging.SearchPageSourceimport com.itssvkv.darkpix.utils.safeapi.safeApiCallimport javax.inject.Injectclass ApiCallsRepositoryImp @Inject constructor(    private val apiCalls: ApiCalls,    private val apiServers: ApiServers) :    ApiCallsRepository {    override suspend fun getCategoryData(): List<CategoryData> = listOf(        CategoryData(R.drawable.rec_popular, "Popular"),        CategoryData(R.drawable.rec_natural, "Natural"),        CategoryData(R.drawable.love, "Love"),        CategoryData(R.drawable.backgrounds, "Backgrounds"),        CategoryData(R.drawable.beauty, "Beauty"),        CategoryData(R.drawable.food, "Food"),        CategoryData(R.drawable.architecture, "Architecture"),        CategoryData(R.drawable.emotions, "Emotions"),        CategoryData(R.drawable.animal, "Animals")    )    override suspend fun getAllPhotos(): Pager<Int, PixelsPhotosResponse.Photo> {        return Pager(            config = PagingConfig(pageSize = 20, enablePlaceholders = false, prefetchDistance = 1),            pagingSourceFactory = { PhotosPageSource(apiCalls = apiCalls) }        )    }    override suspend fun searchForItem(query: String): Pager<Int, PixelsPhotosResponse.Photo> {        return Pager(            config = PagingConfig(pageSize = 20, enablePlaceholders = false, prefetchDistance = 1),            pagingSourceFactory = { SearchPageSource(apiCalls = apiCalls, query) }        )    }    override suspend fun getAccessToken(        clientId: String,        clientSecret: String,        redirectUri: String,        code: String,        grantType: String    ) = safeApiCall {        apiServers.getAccessToken(            clientId,            clientSecret,            redirectUri,            code,            grantType        )    }    override suspend fun getTrendingData(): List<TrendingData> = listOf(        TrendingData("black and white"),        TrendingData("fashion"),        TrendingData("Love"),        TrendingData("design"),        TrendingData("photography")    )}